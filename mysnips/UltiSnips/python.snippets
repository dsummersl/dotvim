clearsnippets
priority 1

global !p
import os
import sys
sys.path.append(os.path.expanduser('~/.vim/python'))
from ultisniphelpers import *
endglobal

snippet p "print " !b
print "$1"$0
endsnippet

snippet pe "print var" !b
print "$1 = {0}".format($1)
endsnippet

snippet lg "logger.log" !b
logger.$1`!p snip.rv=complete(t[1],['info','debug','error','warn'])`(${3:'${2:message}'}${4})$0
endsnippet

snippet lge "logger.log" !b
logger.$1`!p snip.rv=complete(t[1],['info','debug','error','warn'])`('${2}: {}'.format(${3:$2}))$0
endsnippet

snippet kv "key/value" !b
'${1:key}': $2
endsnippet

snippet def "function with docstrings" !b
def ${1:function}(${2:params}):
  ${4:""" ${3:TODO document function} """}
  ${5:pass}
endsnippet

snippet for "for loop" !b
for ${1:val} in ${2:`!p snip.rv=t[1]`s}:
  ${3:# TODO ...}
endsnippet

snippet if "if" !b
if ${1:condition}:
	${2:# content}$0
endsnippet

snippet ifmain "ifmain" b
if __name__ == '__main__':
	${1:main()}$0
endsnippet

snippet from "from module import name" b
from ${1:module} import ${2:Stuff}
endsnippet

snippet try "Try / Except / Else / Finally" b
try:
	${1:pass}
except${2: ${3:Exception}, ${4:e}}:
	${5:raise}
else:
	${6:pass}
finally:
	${7:pass}
endsnippet

snippet with "with syntax" !b
with $1 as $2:
	$0
endsnippet

snippet break "Set PDB breakpoint" b
import pdb; pdb.set_trace()
endsnippet

snippet trace "print stack trace" !b
import traceback
traceback.print_stack()$0
endsnippet

snippet testcase "pyunit testcase" b
class Test${1:Class}(${2:unittest.TestCase}):
	"""${3:Test case docstring}"""

	def setUp(self):
		${4:pass}

	def tearDown(self):
		${5:pass}

	def test_${6:name}(self):
		${7:pass}
endsnippet
