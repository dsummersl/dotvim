priority 10

snippet try "try/catch" !b
	try {
		${VISUAL}
	} catch (${1:e}) {
		${0:/* handle error */}
	}

snippet at "attr(k,v)" !b
	.attr('$1',$2)$0

snippet lg "console.log" !w
	console.log("|$1");$0

snippet lge "console.log variable" !w
	console.log("|$1 = "+ $1);$0

snippet lgev "console.log variable(stringify)" !w
	console.log("|$1 = "+ JSON.stringify($1));$0

snippet str "Stringify" !w
	JSON.stringify($1)$0

snippet fu "function" !w
	const $1 = () => $3;

snippet la "lambda function" !w
	($1) => $0


snippet trace "dump stack trace" !b
	console.log(new Error().stack);

snippet brk "node.js breakpoint" !b
	debugger;$0

snippet break "node.js breakpoint" !b
	debugger;$0

snippet req "require statement" !b
	var $1 = require('${2:$1}');$0

snippet desc "Describe (js)" !b
	describe('${1:description}', () => {
		$0
	});

snippet it "it (js)" !b
	it('${1:description}', ($2) => {
		$0
	});

snippet if "if()" !b
	if ($1) {$2}

snippet aft "afterEach()" !b
	after${1:Each}(function() {
		$2
	});

snippet for "for loop" !b
	for (var ${1:i}=0; $1<$2; $1++) {
		$3
	}

snippet bef "beforeEach()" !b
	before${1:Each}(function() {
		$2
	});

snippet exp "expect()" !b
	expect($1).$2

snippet comp "React function" !b
	const ${1:Component} = () => $2;

snippet imp "!important" !
	!important

snippet use "const useX = X();" !b
	const $1 = use`!p snip.rv=capitalize(t[1])`();$2

snippet sel "const data = useSelector((state) => state...);" !b
	const $1 = useSelector((state) => state.${2:$1});$3

snippet sla "styled component lambda function in ${}" !w
	${(${1:props}) => $2}
