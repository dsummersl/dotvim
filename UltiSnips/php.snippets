clearsnippets

global !p
import os
import sys
sys.path.append(os.path.expanduser('~/.vim/python'))
from ultisniphelpers import *

endglobal
snippet lg "PSR-3 logger" !b
$${1:this->}logger->$2`!p snip.rv=complete(t[2],['info','debug','error','warning'])`(${4:"${3:message}"}${5});$0
endsnippet

snippet > "Expand $variable->..." !i
$${1:parent}->${2:child}$0
endsnippet

snippet ifset "if (isset(..))" !b
if ($1isset(${2:var})) {
  $0
}
endsnippet

snippet th "$this->" !
$this->$0
endsnippet

snippet ppre "print w/ <pre> tags." !b
print "<pre>". $1 ."</pre>";$0
endsnippet

#snippet erno "Print VT error number line (using register i)" !b
#reportError(${1:'err:'. }get_backtrace_string());$0
# * @author ${5:`!v g:snips_author`}
#endsnippet

snippet rp "VT report" !b
reportError("${1}"$2);$0
endsnippet

snippet rpe "VT report a variable" !b
reportError("${1:var}: ". $$1);$0
endsnippet

snippet rpev "VT report a variable w/ var_export" !b
reportError("${1:var}: ". var_export($$1,true));$0
endsnippet

snippet trace "VT back trace" !b
reportError("Trace","",true);
endsnippet

## Snippets from SnipMate, taken from
## https://github.com/scrooloose/snipmate-snippets.git

snippet def "def" !b
define('${1}'${2});${3}
endsnippet

snippet kv "key/value" !b
'${1:key}' => ${3:'${2:value}',}$0
endsnippet

snippet do "do" !b
do {
	${2:// code... }
} while (${1:/* condition */});"
endsnippet

snippet else "else"
else {
	${1:// code...}
}
endsnippet

snippet for "for" !b
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${4:// code...}
}
endsnippet

snippet foreach "foreach" !b
foreach ($${1:variable} as $${2:key}){
	${3:// code...}
}
endsnippet

snippet foreachk "foreachk" !b
foreach ($${1:variable} as $${2:key} => $${3:value}){
	${4:// code...}
}
endsnippet

snippet if "if" !b
if (${1:/* condition */}) {
	${VISUAL}$0
}
endsnippet

snippet fu "function snip" !
function ${1}(${2}) {
	$0
}
endsnippet

snippet docfu "Function snip w/ docs" !b
// ${1:DESCRIPTION}
// 
// Parameters:
// `!p
snip.rv = ''
# if there are parameters, show each parameter in the function list
if t[3]:
  # find the max length for padding
  maxlen=0
  for param in t[4].split(','):
    if len(param.split('=')[0].strip()) > maxlen:
      maxlen = len(param.split('=')[0].strip())
  for param in t[4].split(','):
    parts = param.split('=')
    name = parts[0]
    snip.rv += '\n'+ snip.mkline('//   %s' % name.strip().rjust(maxlen))
    if len(parts) > 1:
      default = parts[1]
      snip.rv += ' - XXX (default: %s)' % default
    else:
      snip.rv += ' - XXX'
`
//
// Returns:
${2:public }function ${3:name}(${4:$param}) {
	${VISUAL}$0
}
endsnippet

snippet testfu "SimpleTest function snip" !b
/// Group: test$1
/// ...${2:DESCRIPTION}
function test${1:name}() {
  /// Test: XXX
	${VISUAL}$0
}
endsnippet

snippet ife "if else"
if (${1:/* condition */}) {
	${2:// code...}
} else {
	${3:// code...}
}
$0
endsnippet

snippet class "Class declaration template" !b
// $0
class $1 {
	public function $1() { }

	public static function instance() {
		return new $1();
	}
}
endsnippet

# :vim:ft=snippets:
