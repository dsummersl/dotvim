clearsnippets

snippet > "Expand $variable->..." !i
$${1:parent}->${2:child}$0
endsnippet

snippet th "$this->" !i
$this->$0
endsnippet

#snippet erno "Print VT error number line (using register i)" !b
#reportError(${1:'err:'. }get_backtrace_string());$0
# * @author ${5:`!v g:snips_author`}
#endsnippet

snippet rpe "VT report a variable" !b
reportError("${1:var}: ". $$1);$0
endsnippet

snippet rpev "VT report a variable w/ var_export" !b
reportError("${1:var}: ". var_export($$1,false));$0
endsnippet

snippet dbg "Print VT debug statements" !b
reportError(${1:'err:'. }get_backtrace_string());$0
endsnippet

## Snippets from SnipMate, taken from
## https://github.com/scrooloose/snipmate-snippets.git

snippet array "array"
$${1:arrayName} = array('${2}' => ${3});${4}
endsnippet

snippet def "def"
define('${1}'${2});${3}
endsnippet

snippet kv "key/value" !b
'${1:key}' => ${3:"${2:value}",}$0
endsnippet

snippet do "do"
do {
	${2:// code... }
} while (${1:/* condition */});"
endsnippet

snippet else "else"
else {
	${1:// code...}
}
endsnippet

snippet for "for"
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${4:// code...}
}
endsnippet

snippet foreachk "foreachk"
foreach ($${1:variable} as $${2:key} => $${3:value}){
	${4:// code...}
}
endsnippet

snippet if "if"
if (${1:/* condition */}) {
	${2:// code...}
}
endsnippet

snippet t "Set val on one line: $val = cond ? a:b"
$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
endsnippet

snippet fu "Function snip" !b
// ${1:DESCRIPTION}
// 
// `!p
snip.rv = ''
# if there are parameters, show each parameter in the function list
if t[3]:
  # find the max length for padding
  maxlen=0
  for param in t[4].split(','):
    if len(param.split('=')[0].strip()) > maxlen:
      maxlen = len(param.split('=')[0].strip())
  for param in t[4].split(','):
    parts = param.split('=')
    name = parts[0]
    snip.rv += '\n'+ snip.mkline('//   %s' % name.strip().rjust(maxlen))
    if len(parts) > 1:
      default = parts[1]
      snip.rv += ' = XXX (default: %s)' % default
    else:
      snip.rv += ' = XXX'
`
// Returns:
${2:public }function ${3:name}(${4:$param}) {
	${VISUAL}$0
}
endsnippet
# :vim:ft=snippets

snippet fore "Foreach loop"
foreach ($${1:variable} as $${3:value}) {
	${VISUAL}${4}
}
$0
endsnippet

snippet new "New class instance" !b
$$1 = new $1($2);
$0
endsnippet


snippet ife "if else"
if (${1:/* condition */}) {
	${2:// code...}
} else {
	${3:// code...}
}
$0
endsnippet


snippet class "Class declaration template" !b
//
// Class ${1:`!p snip.rv=snip.fn.capitalize().split('.')[0]`} 
// @author $2
//
class $1 {
	public function ${3:__construct}(${4:$options}) {
	    ${4:// code}
	    $0
	}
}
endsnippet

# :vim:ft=snippets:

