clearsnippets

global !p
import os
import sys
sys.path.append(os.path.expanduser('~/.vim/python'))
from ultisniphelpers import *
endglobal

snippet args "Add default VT style arg parsing." b
import sys
import platform
import re
if (('-h' in sys.argv) or ('--help' in sys.argv) or (len(sys.argv) <= 1)):
  invocation = '`!v substitute(@%, "^.*\/", "", "")`'
  if (platform.system() == 'Windows'):
    invocation = 'python `!v substitute(@%, "^.*\/", "", "")`'
  print('Usage: '+invocation+' [options] <environments>')
  print('''
${2:Description}

Options:
  --help,-h                   Display this help message.
  --test                      Run tests in this script.`!p
# by default don't make a new variable.
snip.rv = ''
if t[4]:
  # show the option for this new option
  keyval = '--'+ t[3] +'=<VAL>'
  # TODO it would be cool to make this \t expand tab aware
  snip.rv = '\n  '+ keyval +''.rjust(30 - len(keyval) - int(vim.eval('&shiftwidth'))) + 'DESCRIPTION'
`
''')

# argument parameters:
TEST=False`!p
# by default don't make a new variable.
snip.rv = ''
if t[4]:
  # show the variable as long as it exists:
  snip.rv = '\n'+ t[3] +'=None'
`

# parse out the program parameters:
for arg in sys.argv[1:]:
  m = re.match('--([a-z-]+)=(.*)', arg)
  if arg == '--test':
    TEST = True
  elif m:
    key = m.group(1)
    value = m.group(2)
    ${4:
    if key == '${3:VARIABLE}':
      $3 = value
}
  else:
    print "Unknown option: '%s'" % (arg)
    print "Run with -h option to see how to use this script. "
    sys.exit(1)

if TEST:
  import nose
  sys.exit(nose.main(argv=['-vvv',__file__]))
$0
endsnippet

snippet def "function with docstrings" b
def ${1:function}(${2:params}):
  ${4:""" ${3:TODO document function} """}$0
endsnippet

snippet for "for loop" !b
for ${2:val} in ${1:values}:
  ${3:# TODO ...}
endsnippet
snippet if "if" b
if ${1:condition}:
	${2:# content}$0
endsnippet

snippet ifmain "ifmain" b
if __name__ == '__main__':
	${1:main()}$0
endsnippet

snippet from "from module import name" b
from ${1:module} import ${2:Stuff}
endsnippet

snippet try "Try / Except / Else / Finally" b
try:
	${1:pass}
except${2: ${3:Exception}, ${4:e}}:
	${5:raise}
else:
	${6:pass}
finally:
	${7:pass}
endsnippet

snippet pdb "Set PDB breakpoint" b
import pdb; pdb.set_trace()
endsnippet

snippet testcase "pyunit testcase" b
class Test${1:Class}(${2:unittest.TestCase}):
	"""${3:Test case docstring}"""

	def setUp(self):
		${4:pass}

	def tearDown(self):
		${5:pass}

	def test_${6:name}(self):
		${7:pass}
endsnippet



snippet th "expand this to that." !b
${1:this}->${2:someting}$0
endsnippet
