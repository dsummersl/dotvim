priority 10
clearsnippets rfc

global !p
import os
import sys
sys.path.append(os.path.expanduser('~/.vim/python'))
from ultisniphelpers import *
endglobal

snippet try "try/catch" !b
try {
	${VISUAL}
} catch (${1:e}) {
	${0:/* handle error */}
}
endsnippet

snippet at "attr(k,v)" !b
.attr('$1',$2)$0
endsnippet

snippet lg "console.log" !w
console.log("|$1");$0
endsnippet

snippet lge "console.log variable" !w
console.log("|$1 = "+ $1);$0
endsnippet

snippet lgev "console.log variable(stringify)" !w
console.log("|$1 = "+ JSON.stringify($1));$0
endsnippet

snippet str "Stringify" !w
JSON.stringify($1)$0
endsnippet

snippet fu "function" !w
const $1 = () => $3;
endsnippet

snippet la "lambda function" !w
($1) => $2
endsnippet


snippet trace "dump stack trace" !b
console.log(new Error().stack);
endsnippet

snippet brk "node.js breakpoint" !b
debugger;$0
endsnippet

snippet break "node.js breakpoint" !b
debugger;$0
endsnippet

snippet req "require statement" !b
var $1 = require('${2:$1}');$0
endsnippet

snippet des "Describe (js)" !b
describe('${1:description}', () => {
	$0
});
endsnippet

snippet it "it (js)" !b
it('${1:description}', ($2) => {
	$0
});
endsnippet

snippet if "if()" !b
if ($1) {$2}
endsnippet

snippet aft "afterEach()" !b
after${1:Each}(function() {
	$2
});
endsnippet

snippet for "for loop" !b
for (var ${1:i}=0; $1<$2; $1++) {
	$3
}
endsnippet

snippet forin "for in/of" !b
for (var ${1:i} $2`!p snip.rv=complete(t[2],['in','of'])` ${3:$1s}) {
	$0
}
endsnippet

snippet bef "beforeEach()" !b
before${1:Each}(function() {
	$2
});
endsnippet

# expect($1).$2`!p snip.rv=complete(t[2],['to','not'])`;$0
snippet exp "expect()" !b
expect($1).$2
endsnippet

snippet test "test()" !b
test('$1', () => {
	const component = shallow(
		<$2 />
	);
	$3
});
endsnippet

snippet log "logger.something()" !b
logger.$1`!p snip.rv=complete(t[1],['info','debug','warn','error'])`($2);$0
endsnippet

snippet comp "React function" !b
const ${1:Component} = () => $2;
endsnippet

snippet scomp "Styled component"
const ${1:Component}`!p t[1] = t[1][:1].capitalize() + t[1][1:] if len(t[1]) > 0 else t[1]` = styled${2:.div}\`
	$3
\`;
endsnippet

snippet imp "!important" !
!important
endsnippet

snippet use "const useX = X();" !b
const $1 = use`!p snip.rv=capitalize(t[1])`();$2
endsnippet

snippet sel "const data = useSelector((state) => state...);" !b
const $1 = useSelector((state) => state.${2:$1});$3
endsnippet

snippet useS "useState Hook" !b
const [${1}, set`!p snip.rv=capitalize(t[1])`] = useState(${3:'${4}'});
endsnippet

snippet sla "styled component lambda function in ${}" !w
${(props) => $1}
endsnippet


